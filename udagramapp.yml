Description:
  Manjinder Dhillon / Udacity
  This template deploys Udagram application auto scaling servers in high availability zones.
  Appication files are accessed from S3 using IAM Role for this instance.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0    
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0          
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  S3ROEC2Role:
    Type: AWS::IAM::Role   
    Properties:
      RoleName: !Sub "${EnvironmentName}-S3ROEC2Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        -
          PolicyName: S3ReadOnlyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:Get*
              - s3:List*
              Resource:
              - arn:aws:s3:::udagram-project-md
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    DependsOn: S3ROEC2Role
    Properties:
      Roles:
        - !Sub "${EnvironmentName}-S3ROEC2Role"

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: WebServerSecGroup
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          rm index.html
          aws s3 cp s3://udagram-project-md/udacity.zip .
          unzip -o udacity.zip
          cp -pir udacity/index.html .        
      ImageId: ami-06d51e91cea0dac8d        
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"            
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: WebAppTargetGroup
    DependsOn: WebAppLaunchConfig
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'  
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: LBSecGroup
    Properties:
      SecurityGroups:
      - Ref: LBSecGroup
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"    
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: WebAppTargetGroup
    DependsOn: WebAppLB
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: WebAppTargetGroup
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  DNS:
    Description: The DNS name to the load balancer
    Value: !Sub "http://${WebAppLB.DNSName}"
    Export:
      Name: WebAppDNS2